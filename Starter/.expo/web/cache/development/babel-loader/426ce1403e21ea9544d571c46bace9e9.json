{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/grawr/Projects/react_native/react_native_practice/Starter/components.js\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nexport function ZodiacFeeling(props) {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isExcited = _useState2[0],\n      setIsExcited = _useState2[1];\n\n  var excitedString = \"Calm this \" + props.sign + \" down!\";\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }\n  }, \"This \", props.sign, \" sign is feeling \", props.attribute, \" and \", isExcited ? \"Excited!\" : \"Calm.\"), React.createElement(Button, {\n    onPress: function onPress() {\n      setIsExcited(false);\n    },\n    disabled: !isExcited,\n    title: isExcited ? excitedString : \"Thank you.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }\n  }));\n}\nexport function ZodiacTranslate(props) {\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      text = _useState4[0],\n      setText = _useState4[1];\n\n  var inputString = \"Try some \" + props.sign + \" translation!\";\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    style: {\n      height: 40\n    },\n    placeholder: inputString,\n    onChangeText: function onChangeText(text) {\n      return setText(text);\n    },\n    defaultValue: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    style: {\n      padding: 10,\n      fontsize: 42\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, text.split(' ').map(function (word) {\n    return word && props.emoji;\n  }).join(' ')));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/home/grawr/Projects/react_native/react_native_practice/Starter/components.js"],"names":["React","useState","ZodiacFeeling","props","isExcited","setIsExcited","excitedString","sign","styles","container","attribute","ZodiacTranslate","text","setText","inputString","height","padding","fontsize","split","map","word","emoji","join","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;;AAGA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA,kBACCF,QAAQ,CAAC,IAAD,CADT;AAAA;AAAA,MAC1BG,SAD0B;AAAA,MACfC,YADe;;AAEjC,MAAMC,aAAa,GAAG,eAAeH,KAAK,CAACI,IAArB,GAA4B,QAAlD;AAEA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cACUN,KAAK,CAACI,IADhB,uBACuCJ,KAAK,CAACO,SAD7C,WAC6DN,SAAS,GAAG,UAAH,GAAe,OADrF,CADJ,EAII,oBAAC,MAAD;AACI,IAAA,OAAO,EAAE,mBAAM;AACXC,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAHL;AAII,IAAA,QAAQ,EAAE,CAACD,SAJf;AAKI,IAAA,KAAK,EAAEA,SAAS,GAAGE,aAAH,GAAmB,YALvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ;AAcH;AAED,OAAO,SAASK,eAAT,CAAyBR,KAAzB,EAAgC;AAAA,mBACXF,QAAQ,CAAC,EAAD,CADG;AAAA;AAAA,MAC5BW,IAD4B;AAAA,MACtBC,OADsB;;AAEnC,MAAMC,WAAW,GAAG,cAAcX,KAAK,CAACI,IAApB,GAA2B,eAA/C;AACA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAE;AAACM,MAAAA,MAAM,EAAE;AAAT,KADX;AAEI,IAAA,WAAW,EAAED,WAFjB;AAGI,IAAA,YAAY,EAAE,sBAAAF,IAAI;AAAA,aAAIC,OAAO,CAACD,IAAD,CAAX;AAAA,KAHtB;AAII,IAAA,YAAY,EAAEA,IAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAOI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACI,MAAAA,OAAO,EAAE,EAAV;AAAcC,MAAAA,QAAQ,EAAE;AAAxB,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKL,IAAI,CAACM,KAAL,CAAW,GAAX,EAAgBC,GAAhB,CAAoB,UAACC,IAAD;AAAA,WAAUA,IAAI,IAAIjB,KAAK,CAACkB,KAAxB;AAAA,GAApB,EAAmDC,IAAnD,CAAwD,GAAxD,CADL,CAPJ,CADJ;AAaH;AAED,IAAMd,MAAM,GAAGe,UAAU,CAACC,MAAX,CAAkB;AAC7Bf,EAAAA,SAAS,EAAE;AACPgB,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,eAAe,EAAE,MAFV;AAGPC,IAAAA,UAAU,EAAE,QAHL;AAIPC,IAAAA,cAAc,EAAE;AAJT;AADkB,CAAlB,CAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Text, TextInput, StyleSheet, View, Button, Image } from 'react-native';\n\nexport function ZodiacFeeling(props) {\n    const [isExcited, setIsExcited] = useState(true);\n    const excitedString = \"Calm this \" + props.sign + \" down!\";\n\n    return (\n        <View style={styles.container}>\n            <Text>\n                This {props.sign} sign is feeling {props.attribute} and {isExcited ? \"Excited!\": \"Calm.\"}\n            </Text>\n            <Button\n                onPress={() => {\n                    setIsExcited(false);\n                }}\n                disabled={!isExcited}\n                title={isExcited ? excitedString : \"Thank you.\"}\n            />\n        </View>\n    )\n}\n\nexport function ZodiacTranslate(props) {\n    const [text, setText] = useState('');\n    const inputString = \"Try some \" + props.sign + \" translation!\";\n    return (\n        <View style={styles.container}>\n            <TextInput\n                style={{height: 40}}\n                placeholder={inputString}\n                onChangeText={text => setText(text)}\n                defaultValue={text}\n            />\n            <Text style={{padding: 10, fontsize: 42}}>\n                {text.split(' ').map((word) => word && props.emoji).join(' ')}\n            </Text>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n});\n"]},"metadata":{},"sourceType":"module"}